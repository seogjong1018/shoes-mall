{"version":3,"sources":["data.js","Cart.js","App.js","serviceWorker.js","index.js"],"names":["id","title","content","price","Button","styled","button","connect","state","props","useState","Alert","setAlert","Table","responsive","map","a","i","key","name","quantity","onClick","dispatch","type","data","className","Detail","lazy","inventoryContext","React","createContext","Card","useContext","history","useHistory","push","Shoes","src","width","style","cursor","Test","Inventory","App","setShoes","setInventory","Navbar","bg","expand","Brand","href","marginLeft","fontWeight","fontSize","Toggle","aria-controls","Collapse","Nav","marginRight","Link","as","to","NavDropdown","Item","Divider","exact","path","Jumbotron","display","textAlign","padding","background","marginTop","Provider","value","axios","get","then","result","console","log","catch","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initialValue","store","createStore","action","found","findIndex","copy","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.24e9cd89.chunk.js","sourcesContent":["export default [\r\n  {\r\n    id: 0,\r\n    title: \"White and Black\",\r\n    content: \"Born in France\",\r\n    price: \"120,000원\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Red Knit\",\r\n    content: \"Born in Seoul\",\r\n    price: \"110,000원\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Grey Yordan\",\r\n    content: \"Born in States\",\r\n    price: \"130,000원\",\r\n  },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  margin-top: 8px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Cart = (props) => {\r\n  const [Alert, setAlert] = useState(true);\r\n\r\n  return (\r\n    <div>\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>상품명</th>\r\n            <th>수량</th>\r\n            <th>변경</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.state.map((a, i) => {\r\n            return (\r\n              <tr key={i}>\r\n                <td>{a.id}</td>\r\n                <td>{a.name}</td>\r\n                <td>{a.quantity}</td>\r\n                <td>\r\n                  {/* 현재 줄이 안바뀌고 id와 같은 숫자를 가진 줄의 상품이 바뀌고있음 */}\r\n                  <button\r\n                    onClick={() => {\r\n                      //데이터 수정요청을 할 땐 props.dispatch()\r\n                      props.dispatch({\r\n                        type: \"quanIncrease\",\r\n                        data: i,\r\n                      });\r\n                    }}\r\n                  >\r\n                    +\r\n                  </button>\r\n                  <button\r\n                    onClick={() => {\r\n                      props.dispatch({\r\n                        type: \"quanDecrease\",\r\n                        data: i,\r\n                      });\r\n                    }}\r\n                  >\r\n                    -\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      {Alert === true ? (\r\n        <div className=\"my-alert2\">\r\n          <p>지금 구매하시면 신규할인 20%</p>\r\n          <Button\r\n            onClick={() => {\r\n              setAlert(false);\r\n            }}\r\n          >\r\n            닫기\r\n          </Button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst makeProps = (state) => {\r\n  return {\r\n    state: state,\r\n  };\r\n};\r\n\r\nexport default connect(makeProps)(Cart);\r\n// export default Cart;\r\n","/* eslint-disable */\n\nimport React, { useState, useContext, lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from \"react-bootstrap\";\nimport data from \"./data\";\nimport { Link, Route, Switch, useHistory } from \"react-router-dom\";\n// import Detail from \"./Detail\";\nlet Detail = lazy(() => {\n  return import(\"./Detail.js\");\n});\nimport axios from \"axios\";\nimport Cart from \"./Cart\";\n\nconst inventoryContext = React.createContext();\n\nfunction App() {\n  const [Shoes, setShoes] = useState(data);\n  const [Inventory, setInventory] = useState([10, 11, 12]);\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand\n          href=\"/\"\n          style={{ marginLeft: \"10px\", fontWeight: \"bold\", fontSize: \"1.7rem\" }}\n        >\n          SJ's Shoes Shopping\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav\n            className=\"ml-auto\"\n            style={{ marginRight: \"20px\", fontSize: \"1.2rem\" }}\n          >\n            <Nav.Link as={Link} to=\"/\">\n              Home\n            </Nav.Link>\n            <Nav.Link as={Link} to=\"/cart\">\n              Cart\n            </Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">\n                Another action\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">\n                Separated link\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* Switch는 Route경로가 겹쳐도 하나만 보여주게 하는 기능 */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Jumbotron className=\"background\">\n            <div\n              style={{\n                display: \"inline-block\",\n                textAlign: \"center\",\n                padding: \"40px 0\",\n                width: \"40%\",\n                background: \"rgb(53 53 53 / 55%)\",\n              }}\n            >\n              <h1 style={{ fontSize: \"3.2rem\" }}>20% Season OFF</h1>\n              <p style={{ marginTop: \"20px\" }}>\n                감각적인 신발 코디, SJ's Shoes Shopping\n              </p>\n            </div>\n          </Jumbotron>\n\n          {/* 부트스트랩 문법: container는 좌우 여백을 잡아줌, row는 사이트를 12개의 칼럼으로 쪼갬\n      col-md-4는 4개의 컬럼을 차지하는 div박스로 만든다*/}\n          <div className=\"container\">\n            <inventoryContext.Provider value={Inventory}>\n              <div className=\"row\">\n                {/* Shoes 스테이트를 map함수로 뿌려주는데 Card함수를 반복해서 뿌림 */}\n                {/* map함수는 2개의 파라미터까지 넣을수있음. 왼쪽은 반복문 돌릴때 하나하나의 데이터(shoes의 데이터)\n                오른쪽은 반복문 돌릴때 0, 1, 2 ...의 반복숫자 */}\n                {Shoes.map((a, i) => {\n                  return <Card Shoes={Shoes[i]} i={i} key={i} />;\n                })}\n              </div>\n            </inventoryContext.Provider>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                // ajax요청 성공시 then()실행, 실패시 catch()실행\n                // ajax를 사용하면 json형태(따옴표있는) 데이터를 오브젝트(따옴표제거)형태로 자동변환해줌\n                axios\n                  .get(\"https://codingapple1.github.io/shop/data2.json\")\n                  .then((result) => {\n                    console.log(result.data);\n                    setShoes([...Shoes, ...result.data]);\n                  })\n                  .catch(() => {\n                    console.log(\"실패했습니다.\");\n                  });\n              }}\n            >\n              더보기\n            </button>\n          </div>\n        </Route>\n\n        <Route path=\"/detail/:id\">\n          <Suspense fallback={<div>로딩중입니다.</div>}>\n            <Detail\n              Shoes={Shoes}\n              Inventory={Inventory}\n              setInventory={setInventory}\n            />\n          </Suspense>\n        </Route>\n\n        <Route path=\"/cart\">\n          <Cart />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nconst Card = (props) => {\n  const Inventory = useContext(inventoryContext);\n  const history = useHistory();\n\n  return (\n    <div\n      className=\"col-md-4\"\n      onClick={() => {\n        history.push(\"/detail/\" + props.Shoes.id);\n      }}\n    >\n      <img\n        src={\n          \"https://codingapple1.github.io/shop/shoes\" + (props.i + 1) + \".jpg\"\n        }\n        width=\"100%\"\n        style={{ cursor: \"pointer\" }}\n      />\n      <h4>{props.Shoes.title}</h4>\n\n      <p>\n        {props.Shoes.content} & {props.Shoes.price}\n      </p>\n      <Test />\n    </div>\n  );\n};\n\nconst Test = () => {\n  const Inventory = useContext(inventoryContext);\n  return <p>재고 : {Inventory[0]}</p>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\n// Redux쓰는 이유 1 : 복잡한 props전송이 필요 없음 2: state데이터 관리 가능함\n\nconst initialValue = [];\n\nconst reducer = (state = initialValue, action) => {\n  //장바구니 추가\n  if (action.type === \"add\") {\n    // state 안에 id: action.data 인게 있나?\n    //findIndex() : 자바스크립트함수, array안에서 원하는 데이터 찾아주는 함수\n    //state 안에 id: action.data 인게 있는지?\n    let found = state.findIndex((a) => {\n      return a.id === action.data.id;\n    });\n    //같은상품 주문한 경우 동일상품의 수량을 증가시킴\n    if (found >= 0) {\n      const copy = [...state];\n      copy[found].quantity++;\n      return copy;\n    } else {\n      const copy = [...state];\n      copy.push(action.data);\n      return copy;\n    }\n  } else if (action.type === \"quanIncrease\") {\n    // 수량 증가\n\n    const copy = [...state];\n    copy[action.data].quantity++;\n    return copy;\n  } else if (action.type === \"quanDecrease\") {\n    // 수량 감소\n    const copy = [...state];\n    copy[action.data].quantity--;\n    return copy;\n  } else return state;\n};\n\nconst store = createStore(reducer);\n\n// props 공유하고싶은 컴포넌트를 Provider로 감싼다.\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}